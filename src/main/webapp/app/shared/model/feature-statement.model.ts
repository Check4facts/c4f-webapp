import { IStatement } from 'app/shared/model/statement.model';

export interface IFeatureStatement {
  id?: number;
  sFertileTerms?: number;
  sSubjectivity?: number;
  sSubjectivityCounts?: number[];
  sSentiment?: number;
  sSentimentCounts?: number[];
  sEmotionAnger?: number[];
  sEmotionDisgust?: number[];
  sEmotionFear?: number[];
  sEmotionHappiness?: number[];
  sEmotionSadness?: number[];
  sEmotionSurprise?: number[];
  sPgPolarityCounts?: number[];
  rTitleFertileTerms?: number;
  rTitleSimilarity?: number;
  rTitleSubjectivity?: number;
  rTitleSubjectivityCounts?: number[];
  rTitleSentiment?: number;
  rTitleSentimentCounts?: number[];
  rTitleEmotionAnger?: number[];
  rTitleEmotionDisgust?: number[];
  rTitleEmotionFear?: number[];
  rTitleEmotionHappiness?: number[];
  rTitleEmotionSadness?: number[];
  rTitleEmotionSurprise?: number[];
  rTitlePgPolarityCounts?: number[];
  rBodySimilarity?: number;
  rBodySubjectivity?: number;
  rBodySubjectivityCounts?: number[];
  rBodySentiment?: number;
  rBodySentimentCounts?: number[];
  rBodyEmotionAnger?: number[];
  rBodyEmotionDisgust?: number[];
  rBodyEmotionFear?: number[];
  rBodyEmotionHappiness?: number[];
  rBodyEmotionSadness?: number[];
  rBodyEmotionSurprise?: number[];
  rBodyPgPolarityCounts?: number[];
  rSimParFertileTerms?: number;
  rSimParSimilarity?: number;
  rSimParSubjectivity?: number;
  rSimParSubjectivityCounts?: number[];
  rSimParSentiment?: number;
  rSimParSentimentCounts?: number[];
  rSimParEmotionAnger?: number[];
  rSimParEmotionDisgust?: number[];
  rSimParEmotionFear?: number[];
  rSimParEmotionHappiness?: number[];
  rSimParEmotionSadness?: number[];
  rSimParEmotionSurprise?: number[];
  rSimParPgPolarityCounts?: number[];
  rSimSentFertileTerms?: number;
  rSimSentSimilarity?: number;
  rSimSentSubjectivity?: number;
  rSimSentSubjectivityCounts?: number[];
  rSimSentSentiment?: number;
  rSimSentSentimentCounts?: number[];
  rSimSentEmotionAnger?: number[];
  rSimSentEmotionDisgust?: number[];
  rSimSentEmotionFear?: number[];
  rSimSentEmotionHappiness?: number[];
  rSimSentEmotionSadness?: number[];
  rSimSentEmotionSurprise?: number[];
  rSimSentPgPolarityCounts?: number[];
  predictLabel?: boolean;
  predictProba?: number;
  trueLabel?: boolean;
  harvestIteration?: number;
  statement?: IStatement;
}

export const defaultValue: Readonly<IFeatureStatement> = {};
